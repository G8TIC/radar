Radar Feeder - Version 2.00
===========================

This is version 2.0 of the radar feeder service ("radar") for 1090MHz.uk -- see:

		https://www.1090mhz.uk


This is a partial re-write with updated protocol, several bug fixes and more features
and performance improvements.



Port number
-----------

Radar v1 protocol used UDP port 2227 - Radar v2 protocol uses UDP port 5997.

You can no longer change the port number from the CLI options - but this feature isn't
meaningful or needed.


Message types ("opcode")
------------------------

Messages now have an 8-bit "opcode" field to define the message type.

The v1 protocol sent only Extended Squitter (DF17, DF18 and DF19) - the new system has
multiple message types for Mode-A/C, Mode-S (short), Mode-S (Extended), Keep-Alive, Stats
and Telemerty.


Magic number/CRC32 replaced with authentication tag
---------------------------------------------------

The v1 protocol used a magic number (4 bytes) and CRC32 (4 bytes) that are now replaced
with a 64-bit (8-byte) authentication tag (digital signature) on each message.

The authentication tag protects against message corruption, tampering and forgery using
a truncated HMAC-SHA256.

The HMAC-SHA256 computation is made of the message (less authentication tag at the end)
using a 512-bit key derived from a pre-shared key (pass-phrase). The HMAC is truncated
to 64-bits as a trade-off between complexity/bandwidth.

Both parties (sender and aggregator) must agree a pre-shared private key.  The pre-shared
key is 1-64 bytes in size and passed with the "-p" option on the command line.

If no pass-phrase is specified the sender defaults to using "secret".

Good pass-phrases are 16+ characters long and come from random.org


Message length
--------------

The majority of messages sent by Radar v2 are now 50 bytes long (telemetry and stats are
longer but infrequent).


Auto-detect BEAST/AVR protocol
------------------------------

Rather than probing and manually configuring BEAST or AVR mode operation the software
now auto-configures by trying BEAST first and if it's available using if, if not falling
back to AVR.

If neither are available Radar exits with an error message.

The options "-a" and "-b" have been removed.


Fix performance issues on some Raspberry Pi
-------------------------------------------

Using blocking read() caused 'lumpy' operation on some systems - switching to recv() with MSG_DONTWAIT
and habndling EGARIN/EWOULDBLOCK fixed the lumpyness at the expense of making loadave > 1.00 all the
time.  Re-implemented BEAST and AVR connectors using select() to fix the problem - properly.


Messages forwarded to the aggregator
------------------------------------

By default Radar v2 forwards Mode-S Extended Sequitter types DF17, DF18 and DF19 in the same
way as Radar v1, but the CLI option "-e <number>" can be specified to increase the Extended
Squitter messages to include DF20/21, DF16, DF22 or all extended squitter messages.

Don't do this (yet) as the aggretgator doesn't use them.

The "-c" option enables sending of Mode-A/C messages but is not enabled by default as the
aggregator doesn't use them.

The "-y" option enables sending of Mode-S short messages but is not enabled by default as the
aggregator doesn't use them.


Deduplication
-------------

We now have a de-duplicate for Mode-S (short) and Mode-S (extended) messages.

Both de-duplicators work over a 3 second interval but are cleaned at 10Hz which has been
determined as the optimum by trial-and-error.

Deduplication saves around 30-35% of traffic being sent reducing network bandwidth and
load on the central aggregator.


Foreground stats
----------------

You can monitor the number of frames forwarded using the "-f" option (used to be "-s" on v1).


Telemetry
---------

We now send some Telemetry - info about the system Radar forwarder is running on to help
understand performance and throughput issues and find bugs.

The info we send includes the processor architecture, number of cores, CPU temperature,
memory utilisation, number of processes running, CPU load averages, Linux kernel version,
GCC compiler version, Glib-C version, etc. and forwards them to the aggregator.

Telemetry updated default to every 15 minutes (900 seconds) by can be altered with the
CLI option "-t <seconds>"

We only send things related to the environment and performance of the system - we don't
send anything about you, your network, files, IP addresses...

CPU temperature is taken from thermal zone 0 on ARM and from zone 2 on X86 unless the
"-z <sone number>" is provided.

See telemetry.h for items we send.


Statistics
----------

The software gathers statistics on the radio channel and the number of Mode-A/C, Mode-S
(short) and Mode-S (extended) downlink formats and sends them to the aggregator periodically
to allow us to assess the 1090MHz channel occupancy at your receiving station.

See stats.h for further info.


Fix for 32/64-bit problems
--------------------------

Some ARM platforms have mixed archtecture - foe example Raspberry Pi OS 11.7 has a 64-bit kernel
(aarch64) but a 32-bit Glibc/runtime.

This caused problems with variables of type time_t which may be 32-bit or 64-bit.  We changed
the code to  explicit of use uint32_t and uint64_t and use of cast operators to fix these
issues.


Updated setup
-------------

The set-up script (setup.sh) has has a few tweaks and been tidied up.

Setup now askes for your API/sharing key and for your pass-phrase.

If you don't set the pass-phrase then the "-p <pass-phrase>" option isn't included and the
sender defaults to using "secret" as the pre-shared key.



Version 2.01 - 9th December 2023
================================

Change BEAST and AVR drivers to perform auto-detect by trying BEAST and falling back to AVR.

Update BEAST and AVR drivers to use select() for improved performance.


Version 2.02 - 11th Decembe 2023
================================

CPU temperature thermal zone changes with architecture and machine type. Change code from
heuristic guess to auto-detect code - with find_thermal_zone().







