README - ADS-B Radar Forwarder
==============================

Version: 2.01
Author:  Mike Tubby G8TIC mike@tubby.org
Date:    9th December 2023



Introduction
------------

This is my ADS-B Mode-S Extended Squitter (ES) radar sender that relays Mode-S ES packets
from an ADS-B receiver to a central aggregator service, a bit like FlightRadar24, FlightAware
and others but:

  * is optimised for real-time operation
  * only uses modern Extended Squitter DF17/DF18/DF19 messages
  * sends each message in a UDP/IP frame


What you need
-------------

You need a system that uses an RTL dongle (RTL2832) and uses:

  * Dump1090
  * Dump1090-Mutability
  * Dump1090-FA
  * Reassb

This program, when compiled and installed, connects to the local Dump1090 instance using the
BEAST binary protocol on port 30005 and extracts frames and looks for Mode-S Extended Sequitter
and forwards these in 49-byte UDP/IP frames to the aggregartor.

If it can't connect to BEAST on port 30005 it will try fall-back to AVR on 30002 but we won't
get MLAT.


Processor architectures
-----------------------

As of vesion 2.00 we now support the following CPU architectures:

  * Intel/AMD 64-bit (Atom, Celeron, Core, Xeon)
  * ARM 32-bit such as Raspberry Pi in 32-bit mode (arch: armhf)
  * ARM 64-bit such as Raspberry Pi in 64-bit mode (arch: aarch64)
  * NXP iMX8 family in 64-bit aarch64 mode

Fixes have been applied to the code to complile and work on all of these platforms.


Building the code
-----------------

I have made the code "all in one place", it is modular but I have included the parts of my
library code so that it is easy to compile and use.

Assuming that you're on Ubuntu, Debian or Devuan and have build-essential installed then:

Copy the tarball somewhere and extract it, then:

	cd radar-x.y.z
	make
	make install

The last stage (make install) runs a set-up script that:

  * copies the binary to the right place with the right permissions
  * asks you for your API key (ask me for one if you don't already have it)
  * creates the /etc/default/radar file for you with your API key
  * installs a systemd unit or sysv-init script adn enables it
  * starts the radar service

and basically attempts to make it ready for 'showtime' as our American friends say ;-)


Set up
------

You will need an API key (64-bit random number) from me to match your traffic against.

We need to agree a 3-12 character station name like WORCESTER, NEWYORK, LONDON this
doesn't have to be personally identifable, just unique.

I need the Lat/Long of the installation of your antenna in decimal degrees with at least 5
decimal digits of accuracy for distance calculations on all messages and to resolve surface
position updates (when aircraft are on the ground).


Running the code
----------------

The code has no configuration file. All parameters are passed on the command line (there aren't many of them).

Command line args:

  -k <key>            this is a 64-bit key unique to your installation - ask me for your API key

  -h <hostname>       hostname of aggregator service, defaults to "adsb-in.1090mhz.uk"

  -f                  forground: output packet count/byte count once per second

  -d                  detach and become a daemon



Other pre-requists
------------------

Other things you need:

  1. System time keeping.  Your system needs to be synchronised to UTC using NTP, Chrony or a similar
     time-keeing service within a fraction of a second (we use precision timing)

  2. Domain Name Service.  Your system needs to be able to resolve DNS names

  3. Internet connection.  Your system needd to be connected to the interweb.  We use outgoing UDP/IP
     and your typical installation will send around 80-150 packes a second but each packet is only 49
     bytes in size, so overall it uses 40-60Kbps (max).


Security Position
-----------------

The following statements represent our security posture for the project:

  1. The system sends only information received off-air from publically available sources,
     statistics about the radio channel/packet counts and some telemetry about the device
     it is running on.

  2. The system collects no Personally Identifable Information (PII) from you or anyone else

  3. The system does not collect any information about your internal network (other computers,
     IP addresses, other information)

  4. Information is transmitted un-encrypted (in the clear) since it is collected from public
     sources that are readily available (off-air) so its seems pointless to waste processing
     time, electrons, energy and bandwidth encrypting something that is publically available.

  5. We implement cryptographic authentication tags which are a type of digital signature on
     each message transmitted in order to protect against damage in transit.

  5. All information is UNCLASSIFIED as it is in the public domain

  6. Information that you provide about your receiving station includes:

      a) a name which you choose and is 3-12 characters long and can be fictional/anonymous

      b) the latitude/longitude of your antenna - needed for surface position reports and
         MLAT but we don't display this to anyone

      c) your contact details (name and email address) which are only accessible to the
         system operators and only used in the event of a problem

  7. No personal information is transferred outside the UK or Europe

  8. You are free to delete your station and details at any time

  9. This system complies with UK and EU privacy regulations such as the GDPR

 10. The source code for this system is provided in order to build the software - you are
     free to audit the software and it's functionality to verify these statements

 11. By using UDP/IP "transmit only" and having no packet receive processing (code review)
     the required data leaves your system and passes through out-bound NAT on your firewall/
     router and no inbound packets are sent by our server(s) - even if we sent packets back
     (which we don't) there is no packet receive handling in the code (code review).

 12. You can minitor the traffic sent (and no traffic received) using network tools such
     as 'tcpdump' or 'wireshark' and observing traffic on UDP/IP port 5997.




Mike G8TIC
